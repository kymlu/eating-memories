---
import { Icon } from "astro-icon/components"
import { ICONS } from "../const.ts";
interface Props {
    recipeId: string;
}
const { recipeId } = Astro.props;
---
<save-button class="relative w-6 h-6" data-recipe-id={recipeId}>
    <button class="absolute top-0 right-0"><Icon name={ICONS.NOT_SAVED}/></button>
    <button class="absolute top-0 right-0 hidden"><Icon name={ICONS.SAVED}/></button>
</save-button>

<script>
    import { addSavedRecipe, getUserSavedRecipes, removeSavedRecipe } from "../helpers/saved-recipe-helper.ts";
    class SaveButton extends HTMLElement {
        buttons: HTMLButtonElement[];
        recipeId: string;
        constructor(){
            super();
            this.recipeId = "";
            this.buttons = [];
        }
        
        connectedCallback(){
            this.recipeId = this.dataset.recipeId ?? "";
            this.buttons = Array.from(this.querySelectorAll("button"));
            this.buttons[0].addEventListener("click", () => { this.addSaved(); });
            this.buttons[1].addEventListener("click", () => { this.removeSaved(); });
            if (getUserSavedRecipes().includes(this.recipeId)) {
                this.toggleButton(true);
            }
        }
        
        toggleButton(isSaved: boolean){
            this.buttons[0].classList.toggle("hidden", isSaved);
            this.buttons[1].classList.toggle("hidden", !isSaved);
        }

        addSaved(){
            if(addSavedRecipe(this.recipeId)) {
                this.toggleButton(true);
            }
        }
        
        removeSaved(){
            if(removeSavedRecipe(this.recipeId)) {
                this.toggleButton(false);
            }
        }
    }

    customElements.define('save-button', SaveButton);
</script>