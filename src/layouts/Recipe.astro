---
import "../styles/global.css";
import BasePage from "./BasePage.astro";
import { Icon } from "astro-icon/components"
import MiniRecipePreview from "./MiniRecipePreview.astro";
import { getPostLink, titleSort } from "../utils.ts";
import SaveButton from "./SaveButton.astro";
import { ICONS, YIELD_MULTIPLIERS } from "../const";

interface Props {
    frontmatter: Recipe;
}

const { frontmatter } = Astro.props;
const relatedRecipes = await Astro.glob("/src/pages/posts/*.md").then((recipes) => { return recipes.filter((recipe) => recipe.frontmatter.ingredients && 
    (recipe.frontmatter.ingredients.some((group: IngredientsGroup) => group.recipeId && group.recipeId ==frontmatter.id)
    || recipe.frontmatter.ingredients.flatMap((group: IngredientsGroup) => group.ingredients).some((ingredient: Ingredient) => {
        return ingredient.recipeId && ingredient.recipeId ==frontmatter.id})))});

interface Recipe {
    layout: string;
    id: string;
    title: string;
    pubDate: Date;
    description: string;
    adaptedFrom?: string;
    adaptedFromURL?: string;
    cuisine?: string;
    course?: string;
    dietary?: string[];
    yield?: number;
    yieldUnit?: string;
    ingredients?: IngredientsGroup[];
    url: string;
}

interface IngredientsGroup {
    name?: string;
    ingredients: Ingredient[];
    recipeId?: string;
}

interface Ingredient {
    quantity?: number;
    unit?: string;
    name: string;
    note?: string;
    recipeId?: string;
}
---
<BasePage title={frontmatter.title}>
    <div class="flex items-center gap-1 mb-2">
        <h1 class="flex items-center gap-2">{frontmatter.title}</h1>
        <SaveButton recipeId={frontmatter.id}></SaveButton>
    </div>
    <div class="flex flex-col gap-x-16 landscape:flex-row">
        <div class="landscape:max-w-[40%] landscape:min-w-[25%] flex flex-col gap-2">
            <div class="subtitle">{frontmatter.description}</div>
            <div class="flex flex-row flex-wrap items-center gap-2">
                {frontmatter.cuisine && <span class="tag">{frontmatter.cuisine }</span>}
                {frontmatter.course && <span class="tag">{frontmatter.course }</span>}
                {frontmatter.dietary && <div class="flex flex-row gap-2">{frontmatter.dietary.map((diet) => <span class=" tag">{ diet }</span>)}</div>}
            </div>
            {frontmatter.adaptedFrom && <a target="_blank" rel="noopener noreferrer" href={frontmatter.adaptedFromURL} class="subtitle">Adapted from {frontmatter.adaptedFrom}</a>}
            {frontmatter.yield && 
                <yield-component data-default-value={frontmatter.yield} data-unit={frontmatter.yieldUnit} class="w-60 flex flex-col gap-1">
                    <div class="flex flex-row gap-2 justify-between">
                        <button id="minus-yield" class="enabled:hover:text-main-400 disabled:opacity-40 disabled:cursor-default"><Icon name={ICONS.MINUS}></Icon></button>
                        <span class="text-nowrap">Yield: <span id="yield"></span></span>
                        <button id="plus-yield" class="enabled:hover:text-main-400 disabled:opacity-40 disabled:cursor-default"><Icon name={ICONS.PLUS}></Icon></button>
                    </div>
                    <div class="flex flex-row gap-2 justify-between">
                        {YIELD_MULTIPLIERS.map((multiplier) => 
                            <button id={multiplier.key} class="w-8 h-8 select-none hover-shadow border-2 border-solid rounded-lg ">{multiplier.displayValue}x</button>
                        )}
                    </div>
                </yield-component>
            }
            {frontmatter.ingredients && 
                <div id="ingredients-list">
                    <h2 id="ingredients" class="capitalize">Ingredients</h2>
                    <div class="flex flex-col gap-1">
                        {frontmatter.ingredients.map((group: IngredientsGroup) => (
                            <div>
                                {group.name && <div id={group.name.replaceAll(" ", "-").toLowerCase()}>{group.recipeId ? <a href={getPostLink(group.recipeId)} class="underline text-main-500"><h3 class="capitalize">{group.name}</h3></a> : <h3 class="capitalize">{group.name}</h3>}</div>}
                                <ul class="pl-4">
                                    {
                                        group.ingredients.map((ingredient: Ingredient) => 
                                            {
                                                const text = <span>
                                                        {ingredient.quantity && <ingredient-quantity data-default-value={ingredient.quantity}></ingredient-quantity>}
                                                        {ingredient.unit && <span>{ingredient.unit} </span>}
                                                        {ingredient.name && <span>{ingredient.name} </span>}
                                                        {ingredient.note && <span class="text-xs italic subtitle">{ingredient.note}</span>}
                                                    </span>
                                                return <ingredient-component>
                                                            <li class="flex items-center gap-2 list-none decoration-main-600">
                                                                <input type="checkbox">
                                                                {ingredient.recipeId ? <a href={getPostLink(ingredient.recipeId)} class="underline text-main-500">{text}</a> : text}
                                                            </li>
                                                        </ingredient-component>
                                            }
                                    )
                                }
                                </ul>
                            </div>
                            ))
                        }
                    </div>
                </div>
            }
        </div>
        <div class="flex-1 portrait:mt-2">
            <h2 class="capitalize landscape:hidden">Method</h2>
            <div class="recipe-method">
                <slot/>
            </div>
            {relatedRecipes.length > 0 && 
                <div>
                    <hr>
                    <h2>Use this recipe to make</h2>
                    <div class="flex flex-row gap-2 p-2 overflow-y-scroll">
                        { relatedRecipes.sort(titleSort).map((post: any) =>
                            <MiniRecipePreview id={post.frontmatter.id} name={post.frontmatter.title} link={post.url}></MiniRecipePreview>)
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</BasePage>

<script>
    import { YIELD_MULTIPLIERS } from "../const.ts";
    import { getFraction } from "../utils.ts";

    class Ingredient extends HTMLElement {
        constructor(){
            super();
        }
        connectedCallback(){
            this.querySelector("input")?.addEventListener("change", () => {
                this.querySelector("li")?.classList.toggle("line-through");
                this.querySelector("li")?.classList.toggle("opacity-50");
            })
        }
    }
    customElements.define('ingredient-component', Ingredient);

    class Yield extends HTMLElement {
        defaultValue: number;
        currentValue: number;
        unit: string;
        maxMultiplier: number;

        constructor(){
            super();
            this.defaultValue = 1;
            this.currentValue = 1;
            this.unit = "";
            this.maxMultiplier = 10;
        }
        
        connectedCallback(){
            if(this.dataset.defaultValue){
                if(this.dataset.unit){
                    this.unit = this.dataset.unit;
                }
                
                this.currentValue = this.defaultValue = parseInt(this.dataset.defaultValue);
                if(this.defaultValue > 5){
                    this.maxMultiplier = 4;
                }
                this.setYieldString();
                this.checkButtons();
            }
            (this.querySelector("#minus-yield") as HTMLElement).addEventListener("pointerdown", () => {
                this.adjustYield(false);
                const minusInterval = setInterval(() => {
                    if(!this.adjustYield(false)){
                        clearInterval(minusInterval);
                    }
                }, 200);
                
                document.body.addEventListener("pointerup", () => {
                    clearInterval(minusInterval);
                }, { once: true });
            });
            
            (this.querySelector("#plus-yield") as HTMLElement).addEventListener("pointerdown", () => {
                this.adjustYield(true);
                const plusInterval = setInterval(() => {
                    if(!this.adjustYield(true)){
                        clearInterval(plusInterval);
                    }
                }, 200);

                document.body.addEventListener("pointerup", () => {
                    clearInterval(plusInterval);
                }, { once: true });
            });
            
            YIELD_MULTIPLIERS.forEach((multiplier) => {
                this.querySelector(`#${multiplier.key}`)?.addEventListener("click", this.setMultiplier.bind(this, multiplier.value));
            });
        }

        adjustYield(isIncrement: boolean): boolean{
            let isInBounds = true;
            if(isIncrement){
                if(this.currentValue < this.defaultValue * this.maxMultiplier){
                    this.currentValue = Math.floor(this.currentValue + 1);
                } else {
                    isInBounds = false;
                }
            } else {
                if(this.currentValue > 1){
                    this.currentValue--;
                } else {
                    isInBounds = false;
                }
            }
            this.updateScale();
            this.checkButtons();

            return isInBounds;
        }

        setMultiplier(multiplier: number) {
            this.currentValue = this.defaultValue * multiplier;
            this.updateScale();
            this.checkButtons();
        }

        checkButtons() {
            if (this.currentValue <= 1) {
                this.querySelector("#minus-yield")?.setAttribute("disabled", "");
            } else {
                this.querySelector("#minus-yield")?.removeAttribute("disabled");
            }
            
            if (this.currentValue >= this.defaultValue * this.maxMultiplier) {
                this.querySelector("#plus-yield")?.setAttribute("disabled", "");
            } else {
                this.querySelector("#plus-yield")?.removeAttribute("disabled");
            }
        }

        setYieldString(){
            (this.querySelector("#yield") as HTMLElement).innerText = 
                `${this.currentValue.toString()} ${this.currentValue <= 1 
                    ? this.unit : 
                    (this.unit[this.unit.length-1] == "y" ? 
                        `${this.unit.slice(0, this.unit.length-1)}ies` : 
                        `${this.unit}s`)}`;
        }

        updateScale(){
            this.setYieldString();
            (Array.from(document.querySelectorAll("ingredient-quantity")) as IngredientQuantity[]).forEach((count: IngredientQuantity) => {
                count.scaleValue(this.currentValue/this.defaultValue);
            })
        }   
    }
    customElements.define('yield-component', Yield);

    class IngredientQuantity extends HTMLElement {
        defaultValue: number;
        constructor(){
            super();
            this.defaultValue = 1;
        }

        connectedCallback(){
            if(this.dataset.defaultValue){
                this.defaultValue = parseFloat(this.dataset.defaultValue);
                this.innerText = getFraction(this.defaultValue);
            }
        }
        
        scaleValue(scale: number){
            this.innerText = getFraction(this.defaultValue * scale);
        }
    }

    customElements.define('ingredient-quantity', IngredientQuantity);
    
</script>