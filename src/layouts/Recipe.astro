---
import "../styles/global.css";
import BasePage from "./BasePage.astro";
import { Icon } from "astro-icon/components"
import MiniRecipePreview from "../components/previews/MiniRecipePreview.astro";
import { type Recipe, type Ingredient, type IngredientsGroup } from "../interface.ts";
import { getRecipeLink, titleSort } from "../utils.ts";
import { ICONS, YIELD_MULTIPLIERS } from "../const.ts";
import SaveButton from "../components/SaveButton.astro";
import UnitConverter from "../components/converters/UnitConverter.astro";

interface Props {
    frontmatter: Recipe;
}

const { frontmatter } = Astro.props;
const relatedRecipes = await Astro.glob("/src/pages/posts/*.md").then((recipes) => { return recipes.filter((recipe) => recipe.frontmatter.ingredients && 
    (recipe.frontmatter.ingredients.some((group: IngredientsGroup) => group.recipeId && group.recipeId ==frontmatter.id)
    || recipe.frontmatter.ingredients.flatMap((group: IngredientsGroup) => group.ingredients).some((ingredient: Ingredient) => {
        return ingredient.recipeId && ingredient.recipeId ==frontmatter.id})))});
---
<BasePage title={frontmatter.title}>
    <div class="flex items-center gap-1 mb-2">
        <h1 class="flex items-center gap-2">{frontmatter.title}</h1>
        <SaveButton recipeId={frontmatter.id}/>
        <button onclick="window.print()">
            <Icon name={ICONS.PRINT} class="print:hidden"/>
        </button>
    </div>
    <div class="flex flex-col gap-x-16 landscape:flex-row print:flex-col">
        <div class="w-[40%] min-w-[25%] max-w-1/2 portrait:w-full portrait:min-w-full flex flex-col gap-2 print:w-full">
            <div class="subtitle">{frontmatter.description}</div>
            <div class="flex flex-row flex-wrap items-center gap-2">
                {frontmatter.cuisine && <span class="tag">{frontmatter.cuisine }</span>}
                {frontmatter.course && <span class="tag">{frontmatter.course }</span>}
                {frontmatter.dietary && <div class="flex flex-row gap-2">{frontmatter.dietary.map((diet) => <span class=" tag">{ diet }</span>)}</div>}
            </div>
            {frontmatter.adaptedFrom && <a target="_blank" rel="noopener noreferrer" href={frontmatter.adaptedFromURL} class="subtitle">Adapted from {frontmatter.adaptedFrom}</a>}
            {frontmatter.yield && 
                <yield-component data-default-value={frontmatter.yield} data-unit={frontmatter.yieldUnit} class="w-60 flex flex-col gap-1">
                    <div class="flex flex-row flex-wrap gap-2 justify-between">
                        <button id="minus-yield" class="enabled:hover:text-main-400 disabled:opacity-40 disabled:cursor-default print:hidden"><Icon name={ICONS.MINUS}/></button>
                        <span class="text-nowrap">Yield: <span id="yield"/></span>
                        <button id="plus-yield" class="enabled:hover:text-main-400 disabled:opacity-40 disabled:cursor-default print:hidden"><Icon name={ICONS.PLUS}/></button>
                    </div>
                    <div class="flex flex-row flex-wrap gap-2 justify-between print:hidden">
                        {YIELD_MULTIPLIERS.map((multiplier) => 
                            <button id={multiplier.key} class="w-8 h-8 select-none hover-shadow rounded-lg">{multiplier.displayValue}x</button>
                        )}
                    </div>
                </yield-component>
            }
            <hr class="print:hidden">
            {frontmatter.ingredients && 
                <div id="ingredients-list">
                    <h2 id="ingredients" class="capitalize">Ingredients</h2>
                    <div class="flex flex-col gap-1">
                        {frontmatter.ingredients.map((group: IngredientsGroup) => {
                            const groupId = group.name ? group.name.replaceAll(" ", "-").toLowerCase() : "all";
                            return <div>
                                {group.name && 
                                    <div id={groupId}>
                                        {group.recipeId ? 
                                            <a href={getRecipeLink(group.recipeId)} class="underline text-main-500">
                                                <h3 class="capitalize" data-group-id={groupId}>{group.name}</h3>
                                            </a> :
                                            <h3 class="capitalize" data-group-id={groupId}>{group.name}</h3>
                                        }</div>}
                                <ul id={`${groupId}-ingredients`} class="pl-4">
                                    {
                                        group.ingredients.map((ingredient: Ingredient) => 
                                            {
                                                const text = <span>
                                                        {ingredient.quantity && <ingredient-quantity data-default-value={ingredient.quantity} data-unit={ingredient.unit} data-id={ingredient.id}/>}
                                                        {ingredient.name && <span>{ingredient.name} </span>}
                                                        {ingredient.note && <span class="text-xs italic subtitle">{ingredient.note}</span>}
                                                    </span>
                                                return <ingredient-component>
                                                            <li class="flex items-start gap-2 list-none decoration-main-600">
                                                                <input type="checkbox">
                                                                {ingredient.recipeId ? <a href={getRecipeLink(ingredient.recipeId)} class="underline text-main-500">{text}</a> : text}
                                                            </li>
                                                        </ingredient-component>
                                            }
                                    )
                                }
                                </ul>
                            </div>
                            })
                        }
                    </div>
                </div>
            }
        </div>
        <hr class="landscape:hidden print:block">
        <div class="flex-1 portrait:mt-2">
            <h2 class="capitalize hidden portrait:block print:block">Method</h2>
            <div class="recipe-method">
                <slot/>
            </div>
            {relatedRecipes.length > 0 && 
                <div class="print:hidden">
                    <hr>
                    <h2>Use this recipe to make</h2>
                    <div class="flex flex-row gap-2 p-2 overflow-y-scroll">
                        { relatedRecipes.sort(titleSort).map((post: any) =>
                            <MiniRecipePreview id={post.frontmatter.id} name={post.frontmatter.title} link={post.url} iconName={post.frontmatter.iconName}/>)
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <UnitConverter/>
</BasePage>

<script>
    import Ingredient from "../custom-elements/Ingredient";
    import IngredientQuantity from "../custom-elements/IngredientQuantity";
    import Yield from "../custom-elements/Yield";

    let allIngredients = Array.from(document.querySelectorAll("ingredient-quantity")) as IngredientQuantity[];

    (Array.from(document.querySelectorAll(".ingredient")) as HTMLElement[]).forEach((element) => {
        let tempQuantity = new IngredientQuantity();
        let associatedIngredient = allIngredients.find((ingredient) => ingredient.dataset.id == element.dataset.id);
        if(associatedIngredient){
            tempQuantity.setValues(associatedIngredient.defaultValue ? associatedIngredient.defaultValue * (parseFloat(element.dataset.proportion ?? "1")) : undefined, associatedIngredient.unit ? `${associatedIngredient.unit} ` : undefined);
            element.prepend(tempQuantity);
        }
        element.addEventListener("click", () => {
            element.classList.toggle("line-through");
            element.classList.toggle("opacity-50");
        })
    });
</script>