---
import { Icon } from "astro-icon/components"
interface Props {
    id: number;
}
const { id } = Astro.props;
---
<fave-component class="flex items-center" data-id={id}>
    <button><Icon name="mingcute:heart-line"></Icon></button>
    <button class="hidden"><Icon name="mingcute:heart-fill"></Icon></button>
</fave-component>

<script>
    import { LOCAL_STORAGE_KEYS, LOCAL_STORAGE_SEPARATOR } from "../utils";
    class FaveElement extends HTMLElement {
        buttons: HTMLButtonElement[];
        constructor(){
            super();
            this.buttons = [];
        }
        
        connectedCallback(){
            this.id = this.dataset.id?.toString() ?? "";
            this.buttons = Array.from(this.querySelectorAll("button"));
            this.buttons[0].addEventListener("click", () => { this.addFave(); });
            this.buttons[1].addEventListener("click", () => { this.removeFave(); });
            const favesString = window.localStorage.getItem(LOCAL_STORAGE_KEYS.FAVES);
            if(favesString && favesString.split(",").includes(this.id)) {
                this.toggleButton(true);
            }
        }
        
        toggleButton(isFave: boolean){
            this.buttons[0].classList.toggle("hidden", isFave);
            this.buttons[1].classList.toggle("hidden", !isFave);
        }

        addFave(){
            let currentFavees = window.localStorage.getItem(LOCAL_STORAGE_KEYS.FAVES)?.split(LOCAL_STORAGE_SEPARATOR).filter(fave => fave != "") ?? [];
            if(!currentFavees.includes(this.id)){
                let newFavees = currentFavees.concat(this.id).join(LOCAL_STORAGE_SEPARATOR);
                window.localStorage.setItem(LOCAL_STORAGE_KEYS.FAVES, newFavees);
                this.toggleButton(true);
            }
        }
        
        removeFave(){
            let currentFavees = window.localStorage.getItem(LOCAL_STORAGE_KEYS.FAVES);
            if(!currentFavees){
                return;
            }
            let favesList = currentFavees.split(LOCAL_STORAGE_SEPARATOR).filter(fave => fave != "");
            if(favesList.includes(this.id)){
                let newFavees = favesList.toSpliced(favesList.indexOf(this.id), 1).join(LOCAL_STORAGE_SEPARATOR);
                window.localStorage.setItem(LOCAL_STORAGE_KEYS.FAVES, newFavees);
                this.toggleButton(false);
            }
        }
    }

    customElements.define('fave-component', FaveElement);
</script>