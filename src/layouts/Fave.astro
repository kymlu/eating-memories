---
import { Icon } from "astro-icon/components"
interface Props {
    id: string;
}
const { id } = Astro.props;
---
<fave-component class="relative grid" data-id={id}>
    <button class="absolute top-0 right-0"><Icon name="mingcute:heart-line"></Icon></button>
    <button class="absolute top-0 right-0 hidden"><Icon name="mingcute:heart-fill"></Icon></button>
</fave-component>

<script>
    import { LOCAL_STORAGE_KEYS } from "../utils";
    class FaveElement extends HTMLElement {
        buttons: HTMLButtonElement[];
        constructor(){
            super();
            this.buttons = [];
        }
        
        connectedCallback(){
            this.id = this.dataset.id ?? "";
            this.buttons = Array.from(this.querySelectorAll("button"));
            this.buttons[0].addEventListener("click", () => { this.addFave(); });
            this.buttons[1].addEventListener("click", () => { this.removeFave(); });
            // TODO: see if I can set this as a global var
            const favesString = window.localStorage.getItem(LOCAL_STORAGE_KEYS.FAVES);
            try{
                if(favesString && JSON.parse(favesString).includes(this.id)) {
                    this.toggleButton(true);
                }
            } catch(e) {
                this.#removeAllFaves();
            }
        }
        
        toggleButton(isFave: boolean){
            this.buttons[0].classList.toggle("hidden", isFave);
            this.buttons[1].classList.toggle("hidden", !isFave);
        }

        addFave(){
            let currentFaves = window.localStorage.getItem(LOCAL_STORAGE_KEYS.FAVES);
            let favesList: string[] = [];
            if (currentFaves) {
                try {
                    favesList = (JSON.parse(currentFaves) as string[]).filter(fave => fave != "") ?? [];
                } catch(e) {
                    this.#removeAllFaves();
                }
            }
            if(!favesList.includes(this.id)){
                let newFaves = JSON.stringify(favesList.concat(this.id));
                window.localStorage.setItem(LOCAL_STORAGE_KEYS.FAVES, newFaves);
                this.toggleButton(true);
            }
        }
        
        removeFave(){
            let currentFaves = window.localStorage.getItem(LOCAL_STORAGE_KEYS.FAVES);
            if(!currentFaves){
                return;
            }
            try {
                let favesList = (JSON.parse(currentFaves) as string[]).filter(fave => fave != "");
                if(favesList.includes(this.id)){
                    let newFaves = JSON.stringify(favesList.toSpliced(favesList.indexOf(this.id), 1));
                    window.localStorage.setItem(LOCAL_STORAGE_KEYS.FAVES, newFaves);
                    this.toggleButton(false);
                }
            } catch (e) {
                this.#removeAllFaves();
            }
        }

        #removeAllFaves(){
            window.localStorage.removeItem(LOCAL_STORAGE_KEYS.FAVES);
        }
    }

    customElements.define('fave-component', FaveElement);
</script>