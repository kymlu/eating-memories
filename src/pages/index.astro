---
import "../styles/global.css";
import RecipePreview from "../components/previews/RecipePreview.astro";
import BasePage from "../layouts/BasePage.astro";
import { titleSort } from "../utils.ts";
import ExpandableSection from "../layouts/ExpandableSection.astro";
import type { Ingredient, IngredientsGroup } from "../interface.ts";
import { Icon } from "astro-icon/components";
import { ICONS } from "../const.ts";

const allRecipes = await Astro.glob("./posts/*.md");
const allTags = [...new Set(allRecipes.map((recipe) => recipe.frontmatter.course).sort())];
---

<BasePage title="Home">
	<div class="flex flex-row w-full justify-between gap-2 portrait:flex-col">
		<div class="relative flex items-center flex-1">
			<input type="search" id="search" placeholder="Search!" class="flex-1 h-9"/>
			<Icon id="clear-search" name={ICONS.CLOSE_CIRCLE} class="absolute right-2 hidden"></Icon>
		</div>
		<div class="flex flex-row justify-end gap-2 portrait:w-full">
			<button id="expand-all" class="hover-shadow action-button">Expand All</button>
			<button id="collapse-all" class="hover-shadow action-button">Collapse All</button>
		</div>
	</div>
	<div class="mt-5 portrait:mt-2">
		{
			allTags.map((tag) => 
				<div class="recipe-section">
					<ExpandableSection title={tag} startOpen={allTags.indexOf(tag) == 0}>
						<div class="flex flex-col gap-2 pt-1">
							{ allRecipes.filter((recipe) => recipe.frontmatter.course == tag).sort(titleSort).map((post) =>
								<RecipePreview id={post.frontmatter.id} 
									name={post.frontmatter.title} 
									description={post.frontmatter.description} 
									link={post.url} 
									dietary={post.frontmatter.dietary} 
									course={post.frontmatter.course} 
									cuisine={post.frontmatter.cuisine} 
									ingredients={post.frontmatter.ingredients.flatMap((group: IngredientsGroup) => group.ingredients).map((ingredient: Ingredient) => ingredient.name)}
									iconName={post.frontmatter.iconName}/>)
							}
						</div>
					</ExpandableSection>
					<hr class:list={[{"hidden": allTags.indexOf(tag) == allTags.length - 1}]}/>
				</div>
			)
		}
	</div>
</BasePage>

<style>
	.action-button {
		@apply gap-1 px-2 py-1 transition-all rounded-lg h-9 landscape:w-36 portrait:flex-1;
	}
</style>

<script>
	import RecipePreview from "../classes/RecipePreview.ts";
	import SectionHeader from "../classes/CustomHeader.ts";

	(document.querySelector("input") as HTMLInputElement)?.addEventListener("input", (e: Event) => {
		filterRecipes((document.querySelector("input") as HTMLInputElement).value);
	});
	document.querySelector("#clear-search")?.addEventListener("click", (e) => {
		(document.querySelector("input") as HTMLInputElement).value = "";
		filterRecipes();
	});

	document.querySelector("#expand-all")?.addEventListener("click", (e) => {
		toggleAll(true);
	});
	document.querySelector("#collapse-all")?.addEventListener("click", (e) => {
		toggleAll(false);
	});

	/**
	 * Filters the recipes that contain one or more of the keywords that 
	 * the user entered and hides sections if necessary.
	 * @param searchText The user-entered text to search through.
	 */
	function filterRecipes(searchText: string = "") {
		toggleAll(true);

		if (searchText == "") {
			document.querySelector("#clear-search")?.classList.add("hidden");

			Array.from(document.querySelectorAll("recipe-preview")).forEach((recipe) => {
				recipe.classList.remove("hidden");
			});
			Array.from(document.querySelectorAll(".recipe-section")).forEach((section) => {
				section.classList.remove("hidden");
			});
		} else {
			document.querySelector("#clear-search")?.classList.remove("hidden");

			Array.from(document.querySelectorAll(".recipe-section")).forEach((section) => {
				let recipePreviews = (Array.from(section.querySelectorAll("recipe-preview")) as RecipePreview[]);
				let splitSearchQuery = searchText.toLowerCase().split(" ");
				recipePreviews.forEach((recipe) => {
					// if all of the user entered keywords are found in one or more
					// of each of the recipe details or ingredients, the recipe is a match.
					let splitRecipeQuery = recipe.getSearchQuery();
					recipe.classList.toggle("hidden", !splitSearchQuery.every((searchWord: string) => 
							splitRecipeQuery.some((recipeWord: string) => recipeWord.includes(searchWord))));
				});

				// if no recipes in the category match the search terms, hide the whole category
				if(!recipePreviews.some((recipe) => !recipe.classList.contains("hidden"))) {
					section.classList.add("hidden");
				} else {
					section.classList.remove("hidden");
				}
			})
		}
	}

	/**
	 * Toggles all the expandable sections on the page.
	 * @param isExpand True if all the sections should be expanded, false if should be collapsed.
	 */
	function toggleAll(isExpand: boolean) {
		(Array.from(document.querySelectorAll("section-header")) as SectionHeader[]).forEach((section) => {
			section.toggleContents(isExpand);
		});
	}
</script>